AWSTemplateFormatVersion: 2010-09-09
Description: >-
  ECS tasks with log forwarder to grafana/loki
Parameters:
  LogRouterImage:
    Description: The log router docker image to send logs to Loki
    Type: String
    Default: grafana/fluent-bit-plugin-loki:main-e39ea21-amd64
  ContainerImage:
    Description: The app container image
    Type: String
    Default: alpine:3.13
  EnvironmentName:
    Type: String
    Description: The environment where this is deployed to
    AllowedValues: [Testing, Production]
  ClientName:
    Type: String
    Description: The name of the client
  MinimumContainers:
    Type: Number
    Description: The minimum number of containers used in the ECS Service
    Default: 1
  Subnets:
    Type: CommaDelimitedList
    Description: The subnets to place the ECS tasks in 
  LokiEndpoint:
    Type: String
    Description: The URL of the loki LokiEndpoint

Conditions:
  IsProduction: !Equals
    - !Ref EnvironmentName
    - 'Production'

Resources:
  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action:
            - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                - "elasticloadbalancing:DeregisterTargets"
                - "elasticloadbalancing:Describe*"
                - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                - "elasticloadbalancing:RegisterTargets"
                - "ec2:Describe*"
                - "ec2:AuthorizeSecurityGroupIngress"
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:CreateLogGroup"
                - "ecs:ExecuteCommand"
                - "ssmmessages:CreateControlChannel"
                - "ssmmessages:CreateDataChannel"
                - "ssmmessages:OpenControlChannel"
                - "ssmmessages:OpenDataChannel"
              Resource: "*"

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${ClientName}-${EnvironmentName}-cluster'
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: EnvironmentName 
          Value: !Ref EnvironmentName
        - Key: ClientName
          Value: !Ref ClientName
          
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      CapacityProviderStrategy: 
        - !If 
          - IsProduction
          - {CapacityProvider: 'FARGATE', Weight: 1}
          - {CapacityProvider: 'FARGATE_SPOT', Weight: 1}
      EnableExecuteCommand: false
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref MinimumContainers
      TaskDefinition: !Ref ECSTaskdefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED 
          Subnets: !Ref Subnets
      Tags:
        - Key: EnvironmentName 
          Value: !Ref EnvironmentName
        - Key: ClientName
          Value: !Ref ClientName

  ECSTaskdefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: loki
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSServiceRole
      Cpu: 0.25vCPU
      Memory: 1024
      ContainerDefinitions:
        - Name: log_router
          Essential: true
          Image: !Ref LogRouterImage
          FirelensConfiguration:
            Type: "fluentbit"
            Options:
              "enable-ecs-log-metadata": true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "firelens-container"
              awslogs-region: !Ref "AWS::Region"
              awslogs-create-group: true
              awslogs-stream-prefix: "firelens"
          MemoryReservation: 50
          PortMappings:
            - ContainerPort: 3000
        - Name: App
          Essential: true
          Image: !Ref ContainerImage
          EntryPoint: ["sh", "-c"]
          Command:
            ['/bin/sh -c "while true; do sleep 15 ;echo hello_world; done"']
          LogConfiguration:
            LogDriver: "awsfirelens"
            Options:
              Name: "grafana-loki"
              Url: !Sub "${LokiEndpoint}/loki/api/v1/push"
              Labels: '{job="firelens"}'
              RemoveKeys: "container_id,ecs_task_arn"
              LabelKeys: "container_name,ecs_task_definition,source,ecs_cluster"
              LineFormat: "key_value"
      Tags:
        - Key: EnvironmentName 
          Value: !Ref EnvironmentName
        - Key: ClientName
          Value: !Ref ClientName
